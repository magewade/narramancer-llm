from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatAction
import re

from keyboards import kb
from model.model import DNDChatbot
from utils.dice_roller import DiceRoller
from keyboards.kb import get_roll_button_keyboard

user = Router()
dice_roller = DiceRoller()
dnd_bot_interaction = DNDChatbot().interact


@user.message(CommandStart())
async def start(message: Message):
    image_url = "https://i.imgur.com/j7mxtyf.png"
    text = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø—É—Ç–Ω–∏–∫!
–û–ø–∞—Å–Ω–æ–µ —ç—Ç–æ –¥–µ–ª–æ ‚Äî –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø–æ—Ä–æ–≥. –°—Ç–æ–∏—Ç —Å—Ç—É–ø–∏—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥—É –∏, –µ—Å–ª–∏ –¥–∞—à—å –≤–æ–ª—é –Ω–æ–≥–∞–º, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫—É–¥–∞ —Ç–µ–±—è –∑–∞–Ω–µ—Å—ë—Ç.
–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å, –∫—É–¥–∞ –∏–¥—Ç–∏, –∞ —è –±—É–¥—É —Å—Ç—Ä–æ–∏—Ç—å –º–∏—Ä –≤–æ–∫—Ä—É–≥ —Ç–≤–æ–∏—Ö —à–∞–≥–æ–≤.
–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?
    """

    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )
    await message.answer_photo(
        photo=image_url,
        caption=text,
        message_effect_id="5104841245755180586",
        reply_markup=kb.main,
    )


@user.callback_query(F.data == "rules")
async def show_about_bot(callback: CallbackQuery):
    await callback.message.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )

    text = (
        "üßô *Narramancer* ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!\n\n"
        "–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä —Ñ–∞–Ω—Ç–∞–∑–∏–∏, –≥–¥–µ –∏—Å—Ç–æ—Ä–∏—è —Ä–æ–∂–¥–∞–µ—Ç—Å—è –Ω–∞ –ª–µ—Ç—É. "
        "Narramancer –≤–µ–¥—ë—Ç —Ç–µ–±—è –ø–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º —Å—é–∂–µ—Ç–∞–º –≤ —Å—Ç–∏–ª–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö RPG ‚Äî "
        "–Ω–æ *–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª*. –ü—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞–π ‚Äî –æ–Ω –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–±–æ –≤—Å—ë–º.\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π, –Ω–æ —Ç—ã –≤–æ–ª–µ–Ω –∏–¥—Ç–∏ –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ, "
        "–¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∏ –±—ã—Ç—å –∫–µ–º –∑–∞—Ö–æ—á–µ—à—å.\n\n"
        "*–ß—Ç–æ —É–º–µ–µ—Ç Narramancer:*\n"
        "‚Ä¢ –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –º–∏—Ä—ã, –∫–≤–µ—Å—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "‚Ä¢ –†–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≥–µ—Ä–æ—è –ø–æ —Ö–æ–¥—É –∏—Å—Ç–æ—Ä–∏–∏\n"
        "‚Ä¢ –ë—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É\n\n"
        "_–ù–∏–∫–∞–∫–∏—Ö –ø—Ä–∞–≤–∏–ª ‚Äî —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è._"
    )

    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer() 


@user.callback_query(F.data == "start_game")
async def start_game(callback: CallbackQuery):
    await callback.message.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )

    intro_text = (
        "‚ú® –ü–µ–ª–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—Ç—É–ø–∞–µ—Ç—Å—è, –∏ —Ç—ã –æ–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤–µ–ª–∏–∫–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è...\n\n"
        "üë§ *–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –∞ Narramancer –±—Ä–æ—Å–∏—Ç –∫—É–±–∏–∫–∏ –∏ –ø–æ–¥–±–µ—Ä–µ—Ç —Ç–µ–±–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
        "_–ö—Ç–æ —Ç—ã, –æ—Ç–∫—É–¥–∞, –∏ —á–µ–≥–æ –∏—â–µ—à—å –≤ —ç—Ç–æ–º –º–∏—Ä–µ?_"
    )

    await callback.message.answer(intro_text, parse_mode="Markdown")
    await callback.answer()


@user.message()
async def handle_message(message: Message):
    await message.chat.do("typing")
    user_input = message.text
    reply = dnd_bot_interaction(user_input, session_id=str(message.from_user.id))

    # –ò—â–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–∞ –≤–∏–¥–∞ [roll:XdY]
    roll_matches = list(re.finditer(r"\[roll:(\d+)d(\d+)\]", reply))

    if roll_matches:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç—á
        roll_match = roll_matches[0]
        count, sides = map(int, roll_match.groups())

        # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É –±—Ä–æ—Å–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∑–∞–º–µ–Ω—è—è –µ—ë –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        reply_text = reply.replace(roll_match.group(0), "üé≤ –ñ–¥—ë–º –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞...")

        await message.reply(
            reply_text,
            reply_markup=get_roll_button_keyboard(count, sides),
        )
    else:
        await message.reply(reply)


@user.callback_query(F.data.startswith("roll_"))
async def handle_roll(callback: CallbackQuery):
    dice_str = callback.data[len("roll_") :]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–∏–ø–æ–º –∫—É–±–∏–∫–∞
    num, sides = map(int, dice_str.lower().split("d"))

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
    rolls, result_text = DiceRoller.roll(f"{num}d{sides}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
    await callback.message.answer(f"üé≤ –ë—Ä–æ—Å–∞—é –∫—É–±–∏–∫ {num}d{sides}...")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±—Ä–æ—Å–∫–∞
    result_from_player = f"üé≤ –ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–æ: {sum(rolls)}"
    await callback.message.answer(result_from_player)

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤ –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    continuation = dnd_bot_interaction(
        f"–ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–æ: {sum(rolls)}", 
        session_id=str(callback.from_user.id)
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ—Å–∫–∞ –≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
    roll_matches = list(re.finditer(r"\[roll:(\d+)d(\d+)\]", continuation))

    if roll_matches:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ç—á
        roll_match = roll_matches[0]
        count, sides = map(int, roll_match.groups())

        # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É –±—Ä–æ—Å–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∑–∞–º–µ–Ω—è—è –µ—ë –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        continuation_text = continuation.replace(roll_match.group(0), "üé≤ –ñ–¥—ë–º –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞...")

        await callback.message.answer(
            continuation_text,
            reply_markup=get_roll_button_keyboard(count, sides),
        )
    else:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –±—Ä–æ—Å–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        await callback.message.answer(continuation)

    await callback.answer()

